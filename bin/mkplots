#!/usr/bin/env Rscript
options(show.error.locations = TRUE)
options(error = traceback)

# Install and load required libraries
libs <- c("cli", "ggplot2", "plyr", "dplyr", "tidyr", "RColorBrewer", "gridExtra", "egg")
for (lib in libs) {
  if (!require(lib, character.only = TRUE, warn.conflicts = FALSE, quietly = TRUE)) {
    install.packages(lib)
  }

  library(lib, character.only = TRUE, quietly = TRUE)
}

# Load scripts
args <- commandArgs(trailingOnly = FALSE)
file_name <- "--file="
script_name <- sub(file_name, "", args[grep(file_name, args)])
script_basename <- dirname(script_name)

load_script <- function(name) {
  source(file.path(script_basename, "../plots/", name), chdir = TRUE)
}

load_script("data_loader.R")
load_script("stat_plot.R")
load_script("cut_plot.R")
load_script("timing_plot.R")
load_script("memory_plot.R")
load_script("per_instance_plot.R")

# Load statistics of known graphs
graphs_db <- read.csv(
  file.path(script_basename, "../data/graphs.csv"),
  header = TRUE,
  sep = ","
) |> dplyr::distinct()

if (!dir.exists("plots")) {
  dir.create("plots")
}

# Load result file for each algorithm
algorithms <- commandArgs(trailingOnly = TRUE)
data <- list()

generate_all_cut <- TRUE
generate_pairwise_cut <- TRUE
generate_all_time <- TRUE
generate_detailed_time <- TRUE
generate_all_memory <- TRUE
generate_detailed_memory <- TRUE
generate_compression_ratio <- TRUE
generate_per_k <- TRUE
generate_per_instance <- TRUE

for (algorithm in algorithms) {
  algorithm_data_path <- paste0(getwd(), "/results/", algorithm, ".csv")
  df <- load_data(algorithm, algorithm_data_path) %>%
    dplyr::mutate(Algorithm = paste0(Algorithm, "-", NumThreadsPerMPI))

  # Add statistics of known graphs to the data
  df <- merge(df, graphs_db, by = "Graph", all.x = TRUE)

  thread_configs <- unique(df$NumThreadsPerMPI)
  for (thread_config in thread_configs) {
    subdf <- df %>% dplyr::filter(NumThreadsPerMPI == thread_config)
    data <- append(data, list(subdf))
  }

  # Disable plot generation for statistics that are not contained in the data
  if (contains_invalid_column(df, "AvgCut")) {
    generate_all_cut <- FALSE
    generate_pairwise_cut <- FALSE
  }

  if (contains_invalid_column(df, "AvgTime")) {
    generate_all_time <- FALSE
  }

  if (contains_invalid_column(
    df,
    "AvgClusteringTime",
    "AvgContractionTime",
    "AvgInitialPartitioningTime",
    "AvgRefinementTime"
  )) {
    generate_detailed_time <- FALSE
  }

  if (contains_invalid_column(df, "AvgMemory")) {
    generate_all_memory <- FALSE
  }

  if (contains_invalid_column(
    df,
    "AvgInputGraphMemory",
    "AvgFirstCoarseGraphMemory",
    "AvgRemainingMemory"
  )) {
    generate_detailed_memory <- FALSE
  }

  if (contains_invalid_column(df, "CompressionRatio")) {
    generate_compression_ratio <- FALSE
  }
}

data <- filter_data(data)
validate_data(data)

if (generate_all_cut) {
  create_cut_plots(data, generate_pairwise_cut)
}

if (generate_all_time) {
  create_timing_plots(data, generate_per_k, generate_detailed_time)
}

if (generate_all_memory) {
  create_memory_plots(data, generate_per_k, generate_detailed_memory)
}

if (generate_per_instance) {
  create_per_instance_plot(
    data,
    generate_all_cut,
    generate_all_time,
    generate_detailed_time,
    generate_all_memory
  )
}

if (generate_compression_ratio) {
  create_compression_ratio_plots(data)
}
