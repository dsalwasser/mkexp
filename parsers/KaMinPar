# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")

    data["Graph"] = parts[1]
    data["NumNodes"] = -1
    data["NumMPIsPerNode"] = -1
    data["NumThreadsPerMPI"] = -1
    data["Seed"] = -1
    data["ClusteringTime"] = 0
    data["ContractionTime"] = 0
    data["InitialPartitioningTime"] = 0
    data["RefinementTime"] = 0
    data["Memory"] = -1
    data["CompressionRatio"] = -1
    data["SizeReduction"] = -1
    data["Epsilon"] = 0.03

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }

    coarsening = 0
}

/__END_FILE__/ {
    yield()
}

match($0, /^\|-- Partitioning: \.* *([0-9\.e\-]+) s/, m) {
    data["Time"] = m[1]
}
match($0, /`-- Partitioning: \.* *([0-9\.e\-]+) s/, m) {
    data["Time"] = m[1]
}

match($0, /Coarsening: \.* *([0-9\.e\-]+) s/, m) {
    coarsening = 1
}

match($0, /Label Propagation: \.* *([0-9\.e\-]+) s/, m) {
    if (coarsening) {
        data["ClusteringTime"] += m[1]
    }
}

match($0, /Contract graph: \.* ([0-9\.e\-]+) s/, m) {
    data["ContractionTime"] += m[1]
}

match($0, /Initial partitioning: \.* ([0-9\.e\-]+) s/, m) {
    data["InitialPartitioningTime"] = m[1]
}

match($0, /Refinement: \.* ([0-9\.e\-]+) s/, m) {
    data["RefinementTime"] = m[1]
    coarsening = 0
}

match($0, /Global Heap Profiler: \.* ([0-9\.]+)/, m) {
    data["Memory"] = m[1]
}

match($0, /Compresion Ratio: * ([0-9\.]+)/, m) {
    data["CompressionRatio"] = m[1]
}

match($0, /Compresion Ratio: * [0-9\.]+ \[size reduction: ([0-9\.]+) mb\]/, m) {
    data["SizeReduction"] = m[1]
}

match($0, /  Imbalance: *([0-9\.e\-]+)/, m) {
    data["Balance"] = m[1]
}

match($0, /  Edge cut: *([0-9]+)/, m) {
    data["Cut"] = m[1]
}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "K,"
    printf "Seed,"
    printf "Cut,"
    printf "Epsilon,"
    printf "Balance,"
    printf "Time,"
    printf "ClusteringTime,"
    printf "ContractionTime,"
    printf "InitialPartitioningTime,"
    printf "RefinementTime,"
    printf "Memory,"
    printf "CompressionRatio,"
    printf "SizeReduction,"
    printf "NumNodes,"
    printf "NumMPIsPerNode,"
    printf "NumThreadsPerMPI,"
    printf "Failed\n"
}

function yield() {
    if (length(data) == 0) { return }

    printf "%s,", data["Graph"]
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Balance"]
    printf "%f,", data["Time"]
    printf "%f,", data["ClusteringTime"]
    printf "%f,", data["ContractionTime"]
    printf "%f,", data["InitialPartitioningTime"]
    printf "%f,", data["RefinementTime"]
    printf "%f,", data["Memory"]
    printf "%f,", data["CompressionRatio"]
    printf "%f,", data["SizeReduction"]
    printf "%d,", data["NumNodes"]
    printf "%d,", data["NumMPIsPerNode"]
    printf "%d,", data["NumThreadsPerMPI"]
    printf "%d\n", (data["Time"] == "")

    reset()
}

function reset() {
    split("", data)
}
